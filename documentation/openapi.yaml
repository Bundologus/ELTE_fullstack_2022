openapi: 3.0.1
info:
  title: Reservation backend
  description: >-
    Api documentation for the backend of the yet unnamed table reservation tool
    created for the Fullstack Webprogramming course of ELTE, 2021-2022, 2nd
    semester.
  version: 0.1.0
servers:
  - url: https://localhost:3000/
tags:
  - name: user
    description: Operations about user
  - name: unit
    description: >-
      Bars, restaurants and other places of catering business that offer
      reservations to be made.
  - name: opening hours
    description: >-
      Entity describing opening hours for one or more days of the week,
      or a specific calendar day.
  - name: country
  - name: city
  - name: district
  - name: floor plan
    description: >-
      The floor plan of a unit, showing all the reservables available inside. It
      is editable by the owner.
  - name: reservable
    description: A specific table in a unit that is reservable.
  - name: reservation
    description: >-
      A reservation made by a user to a specific reservable for a specific time
      frame.
paths:
  /user:
    post:
      tags:
        - user
      summary: Register user
      description: This is done when a new user registration is submitted.
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                phone:
                  type: string
        required: true
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Email already registered
          content: {}
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_token:
                    type: string
                  token_expires_on:
                    type: string
        '400':
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      security:
        - bearer_auth: []
      responses:
        '200':
          description: successful operation
          content: {}
        '400':
          description: Invalid authentication token
          content: {}
  /user/{email}:
    get:
      tags:
        - user
      summary: Get user by email
      security:
        - bearer_auth: []
      parameters:
        - name: email
          in: path
          description: 'The email of the user that needs to be fetched.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      security:
        - bearer_auth: []
      parameters:
        - name: email
          in: path
          description: email that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                phone:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content: {}
        '400':
          description: Invalid user supplied
          content: {}
        '404':
          description: User not found
          content: {}
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      security:
        - bearer_auth: []
      parameters:
        - name: email
          in: path
          description: The email that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
  /unit:
    post:
      tags:
        - unit
      summary: Create unit
      description: Submit a new unit for creation
      security:
        - bearer_auth: []
      requestBody:
        description: Created unit object
        content:
          application/json:
            schema:
              type: object
              properties:
                owner_id:
                  type: integer
                  format: int64
                name:
                  type: string
                country_id:
                  type: integer
                  format: int64
                city_id:
                  type: integer
                  format: int64
                district_id:
                  type: integer
                  format: int64
                description:
                  type: string
                profile_picture:
                  type: string
                reservation_terms:
                  type: string
                default_min_time:
                  type: string
                defaul_max_time:
                  type: string
                default_time_step:
                  type: string
        required: true
      responses:
        '201':
          description: Unit created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
    get:
      tags:
        - unit
      summary: Get all units
      description: Get all units filtered by the provided parameters
      parameters:
        - name: condensed
          in: query
          description: >-
            True if the response should contain the short unit objects.
            Otherwise the full unit objects are returned.
          schema:
            type: boolean
        - name: owner_id
          in: query
          description: Filter the results by owner id
          schema:
            type: integer
            format: int64
        - name: country_id
          in: query
          description: Filter the results by country
          schema:
            type: integer
            format: int64
        - name: city_id
          in: query
          description: Filter the results by city
          schema:
            type: integer
            format: int64
        - name: district
          in: query
          description: Filter the results by district
          schema:
            type: integer
            format: int64
        - name: open_now
          in: query
          description: Filter the results by opening hours
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Unit'
                    - $ref: '#/components/schemas/FullUnit'
  /unit/{unit_id}:
    get:
      tags:
        - unit
      summary: Get a unit by id
      description: Get the details of a single unit by id
      parameters:
        - name: full
          in: query
          description: >-
            True if the response should contain the full unit object.
            Otherwise the short unit object is returned.
          schema:
            type: boolean
        - name: unit_id
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Unit'
                  - $ref: '#/components/schemas/FullUnit'
        '404':
          description: unit not found
          content: {}
    put:
      tags:
        - unit
      summary: Update a unit by id
      description: Update the details of a single unit by id
      security:
        - bearer_auth: []
      parameters:
        - name: full
          in: query
          description: >-
            True if the response should contain the full unit object.
            Otherwise the short unit object is returned.
          schema:
            type: boolean
        - name: unit_id
          in: path
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        description: Updated unit object
        content:
          application/json:
            schema:
              type: object
              properties:
                owner_id:
                  type: integer
                  format: int64
                name:
                  type: string
                country_id:
                  type: integer
                  format: int64
                city_id:
                  type: integer
                  format: int64
                district_id:
                  type: integer
                  format: int64
                description:
                  type: string
                profile_picture:
                  type: string
                reservation_terms:
                  type: string
                default_min_time:
                  type: string
                defaul_max_time:
                  type: string
                default_time_step:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Unit'
                  - $ref: '#/components/schemas/FullUnit'
        '401':
          description: the user is not the owner or admin of the unit
          content: {}
        '404':
          description: unit not found
          content: {}
    delete:
      tags:
        - unit
      summary: Delete a unit by id
      description: Submitting a deletion request for a unit.
      security:
        - bearer_auth: []
      parameters:
        - name: unit_id
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: Successful operation
          content: {}
        '400':
          description: Invalid user supplied
          content: {}
        '404':
          description: User not found
          content: {}
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Unit:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        address:
          type: string
        description:
          type: string
        profile_picture:
          type: string
    FullUnit:
      type: object
      properties:
        id:
          type: integer
          format: int64
        owner:
          $ref: '#/components/schemas/User'
        name:
          type: string
        country:
          $ref: '#/components/schemas/Country'
        city:
          $ref: '#/components/schemas/City'
        district:
          $ref: '#/components/schemas/District'
        description:
          type: string
        profile_picture:
          type: string
        reservation_terms:
          type: string
        default_min_time:
          type: string
        defaul_max_time:
          type: string
        default_time_step:
          type: string
        opening_hours:
          type: array
          items:
            $ref: '#/components/schemas/OpeningHours'
        floor_plan:
          $ref: '#/components/schemas/FloorPlan'
    OpeningHours:
      type: object
      properties:
        id:
          type: integer
          format: int64
        unit_id:
          type: integer
          format: int64
        reservable_id:
          type: integer
          format: int64
        day_from:
          type: integer
          format: int32
        day_to:
          type: integer
          format: int32
        time_from:
          type: string
        time_to:
          type: string
        specific_date:
          type: string
    Country:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    City:
      type: object
      properties:
        id:
          type: integer
          format: int64
        country_id:
          type: integer
          format: int64
        name:
          type: string
        post_code:
          type: string
    District:
      type: object
      properties:
        id:
          type: integer
          format: int64
        city_id:
          type: integer
          format: int64
        name:
          type: string
        post_code:
          type: string
    FloorPlan:
      type: object
      properties:
        id:
          type: integer
          format: int64
        unit_id:
          type: integer
          format: int64
        width:
          type: integer
          format: int32
        height:
          type: integer
          format: int32
        entities:
          type: array
          items:
            $ref: '#/components/schemas/FpEntity'
    FpEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        reservable_id:
          type: integer
          format: int64
        floor_plan_id:
          type: integer
          format: int64
        parent_id:
          type: integer
          format: int64
        type:
          type: string
          enum:
            - blocked
            - wall
            - door
            - window
            - table
            - chair
            - misc
        custom_fp_data:
          type: string
        custom_user_data:
          type: string
        vertices:
          type: string
    Reservable:
      type: object
      properties:
        id:
          type: integer
          format: int64
        unit_id:
          type: integer
          format: int64
        name:
          type: string
        min_spaces:
          type: integer
          format: int32
        max_spaces:
          type: integer
          format: int32
        min_time:
          type: string
        max_time:
          type: string
        time_step:
          type: string
        opening_hours:
          type: array
          items:
            $ref: '#/components/schemas/OpeningHours'
    Reservation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        reservable_id:
          type: integer
          format: int64
        reserved_on:
          type: string
        start_time:
          type: string
        end_time:
          type: string
        status:
          type: string
          enum:
            - pending
            - accepted
            - rejected
            - cancelled
            - expired
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
